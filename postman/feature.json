{
	"info": {
		"_postman_id": "91f75efd-6fbf-4479-b9ec-abed919749b6",
		"name": "location_processing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28338831"
	},
	"item": [
		{
			"name": "post Area",
			"item": [
				{
					"name": "add area",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let area;\r",
									"    try {\r",
									"        area = rnd.getArea();\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(area),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.have.status(201);\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/areas",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"areas"
							]
						}
					},
					"response": []
				},
				{
					"name": "add area with taken name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let area;\r",
									"    let area1;\r",
									"    try {\r",
									"        area1 = rnd.getArea();\r",
									"        await api.addArea(area1);\r",
									"        area = rnd.getArea();\r",
									"        area.name = area1.name;\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(area),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.have.status(409);\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/areas",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"areas"
							]
						}
					},
					"response": []
				},
				{
					"name": "try to add area with name>250",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let area;\r",
									"    try {\r",
									"        area = rnd.getArea();\r",
									"        area.name = rnd.getWord(251);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(area),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.badRequest;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/areas",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"areas"
							]
						}
					},
					"response": []
				},
				{
					"name": "try to add area with name=250",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let area;\r",
									"    try {\r",
									"        area = rnd.getArea();\r",
									"        area.name = rnd.getWord(250);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(area),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.have.status(201);\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/areas",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"areas"
							]
						}
					},
					"response": []
				},
				{
					"name": "try to add area with name<3",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let area;\r",
									"    try {\r",
									"        area = rnd.getArea();\r",
									"        area.name = rnd.getWord(2);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(area),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.badRequest;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/areas",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"areas"
							]
						}
					},
					"response": []
				},
				{
					"name": "try to add area with name=3",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let area;\r",
									"    try {\r",
									"        area = rnd.getArea();\r",
									"        area.name = rnd.getWord(3);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(area),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.have.status(201);\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/areas",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"areas"
							]
						}
					},
					"response": []
				},
				{
					"name": "try to add area with name blank",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let area;\r",
									"    try {\r",
									"        area = rnd.getArea();\r",
									"        area.name = \"       \";\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(area),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.badRequest;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/areas",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"areas"
							]
						}
					},
					"response": []
				},
				{
					"name": "try to add area with name null",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let area;\r",
									"    try {\r",
									"        area = rnd.getArea();\r",
									"        delete area.name;\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(area),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.badRequest;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/areas",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"areas"
							]
						}
					},
					"response": []
				},
				{
					"name": "try to add area with lat>90",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let area;\r",
									"    try {\r",
									"        area = rnd.getArea();\r",
									"        area.lat = 92;\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(area),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.badRequest;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/areas",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"areas"
							]
						}
					},
					"response": []
				},
				{
					"name": "try to add area with lat=90",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let area;\r",
									"    try {\r",
									"        area = rnd.getArea();\r",
									"        area.lat = 90;\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(area),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.have.status(201);\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/areas",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"areas"
							]
						}
					},
					"response": []
				},
				{
					"name": "try to add area with lat<-90",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let area;\r",
									"    try {\r",
									"        area = rnd.getArea();\r",
									"        area.lat = -91;\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(area),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.badRequest;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/areas",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"areas"
							]
						}
					},
					"response": []
				},
				{
					"name": "try to add area with lat=-90 Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let area;\r",
									"    try {\r",
									"        area = rnd.getArea();\r",
									"        area.lat = -90;\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(area),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.have.status(201);\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/areas",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"areas"
							]
						}
					},
					"response": []
				},
				{
					"name": "try to add area with lat null",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let area;\r",
									"    try {\r",
									"        area = rnd.getArea();\r",
									"        delete area.lat;\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(area),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.badRequest;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/areas",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"areas"
							]
						}
					},
					"response": []
				},
				{
					"name": "try to add area with lon>180",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let area;\r",
									"    try {\r",
									"        area = rnd.getArea();\r",
									"        area.lon = 181;\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(area),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.badRequest;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/areas",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"areas"
							]
						}
					},
					"response": []
				},
				{
					"name": "try to add area with lon=180",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let area;\r",
									"    try {\r",
									"        area = rnd.getArea();\r",
									"        area.lon = 180;\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(area),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.have.status(201);\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/areas",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"areas"
							]
						}
					},
					"response": []
				},
				{
					"name": "try to add area with lon<-180",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let area;\r",
									"    try {\r",
									"        area = rnd.getArea();\r",
									"        area.lon = -181;\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(area),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.badRequest;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/areas",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"areas"
							]
						}
					},
					"response": []
				},
				{
					"name": "try to add area with lon=-180",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let area;\r",
									"    try {\r",
									"        area = rnd.getArea();\r",
									"        area.lon = -180;\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(area),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.have.status(201);\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/areas",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"areas"
							]
						}
					},
					"response": []
				},
				{
					"name": "try to add area with lon null",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let area;\r",
									"    try {\r",
									"        area = rnd.getArea();\r",
									"        delete area.lon;\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(area),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.badRequest;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/areas",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"areas"
							]
						}
					},
					"response": []
				},
				{
					"name": "try to add area with radius null",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let area;\r",
									"    try {\r",
									"        area = rnd.getArea();\r",
									"        delete area.radius;\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(area),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.badRequest;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/areas",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"areas"
							]
						}
					},
					"response": []
				},
				{
					"name": "try to add area with rad>2040",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let area;\r",
									"    try {\r",
									"        area = rnd.getArea();\r",
									"        area.radius = 20041;\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(area),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.badRequest;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/areas",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"areas"
							]
						}
					},
					"response": []
				},
				{
					"name": "try to add area with radius=20040",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let area;\r",
									"    try {\r",
									"        area = rnd.getArea();\r",
									"        area.radius = 20040;\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(area),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.have.status(201);\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/areas",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"areas"
							]
						}
					},
					"response": []
				},
				{
					"name": "try to add area with radius=0",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let area;\r",
									"    try {\r",
									"        area = rnd.getArea();\r",
									"        area.radius = 0;\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(area),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.badRequest;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/areas",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"areas"
							]
						}
					},
					"response": []
				},
				{
					"name": "try to add area with rad>0 and <20040 Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let area;\r",
									"    try {\r",
									"        area = rnd.getArea();\r",
									"        area.radius = 1;\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(area),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.have.status(201);\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/areas",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"areas"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "update area",
			"item": [
				{
					"name": "update area",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"    let area\r",
									"    try {\r",
									"        area = await api.addArea(rnd.getArea());\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"    pm.collectionVariables.set(\"areaid\", Number(area.id))\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(\r",
									"            rnd.getArea()\r",
									"        ),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.have.status(200);\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/areas/:areaId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"areas",
								":areaId"
							],
							"variable": [
								{
									"key": "areaId",
									"value": "{{areaid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "update area with name < 3",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"    let area\r",
									"    try {\r",
									"        area = await api.addArea(rnd.getArea());\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"    pm.collectionVariables.set(\"areaid\", Number(area.id))\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            name : rnd.getWord(2)\r",
									"    }),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.have.status(400);\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/areas/:areaId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"areas",
								":areaId"
							],
							"variable": [
								{
									"key": "areaId",
									"value": "{{areaid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "update area with name = 3 Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"    let area\r",
									"    try {\r",
									"        area = await api.addArea(rnd.getArea());\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"    pm.collectionVariables.set(\"areaid\", Number(area.id))\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            name : rnd.getWord(3)\r",
									"    }),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.have.status(200);\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/areas/:areaId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"areas",
								":areaId"
							],
							"variable": [
								{
									"key": "areaId",
									"value": "{{areaid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "update area with name = 250",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"    let area\r",
									"    try {\r",
									"        area = await api.addArea(rnd.getArea());\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"    pm.collectionVariables.set(\"areaid\", Number(area.id))\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            name : rnd.getWord(250)\r",
									"    }),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.have.status(200);\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/areas/:areaId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"areas",
								":areaId"
							],
							"variable": [
								{
									"key": "areaId",
									"value": "{{areaid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "update area with name > 250",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"    let area\r",
									"    try {\r",
									"        area = await api.addArea(rnd.getArea());\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"    pm.collectionVariables.set(\"areaid\", Number(area.id))\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            name : rnd.getWord(251)\r",
									"    }),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.have.status(400);\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/areas/:areaId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"areas",
								":areaId"
							],
							"variable": [
								{
									"key": "areaId",
									"value": "{{areaid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "update area with lat > 90",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"    let area\r",
									"    try {\r",
									"        area = await api.addArea(rnd.getArea());\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"    pm.collectionVariables.set(\"areaid\", Number(area.id))\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            lat : 91\r",
									"    }),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.have.status(400);\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/areas/:areaId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"areas",
								":areaId"
							],
							"variable": [
								{
									"key": "areaId",
									"value": "{{areaid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "update area with lat = 90",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"    let area\r",
									"    try {\r",
									"        area = await api.addArea(rnd.getArea());\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"    pm.collectionVariables.set(\"areaid\", Number(area.id))\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            lat : 90\r",
									"    }),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.have.status(200);\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/areas/:areaId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"areas",
								":areaId"
							],
							"variable": [
								{
									"key": "areaId",
									"value": "{{areaid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "update area with lon > 180",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"    let area\r",
									"    try {\r",
									"        area = await api.addArea(rnd.getArea());\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"    pm.collectionVariables.set(\"areaid\", Number(area.id))\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            lon : 181\r",
									"    }),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.have.status(400);\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/areas/:areaId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"areas",
								":areaId"
							],
							"variable": [
								{
									"key": "areaId",
									"value": "{{areaid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "update area with lon > 180 Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"    let area\r",
									"    try {\r",
									"        area = await api.addArea(rnd.getArea());\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"    pm.collectionVariables.set(\"areaid\", Number(area.id))\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            lon : 181\r",
									"    }),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.have.status(400);\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/areas/:areaId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"areas",
								":areaId"
							],
							"variable": [
								{
									"key": "areaId",
									"value": "{{areaid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "update area with lon = -180",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"    let area\r",
									"    try {\r",
									"        area = await api.addArea(rnd.getArea());\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"    pm.collectionVariables.set(\"areaid\", Number(area.id))\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            lon : -180\r",
									"    }),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.have.status(200);\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/areas/:areaId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"areas",
								":areaId"
							],
							"variable": [
								{
									"key": "areaId",
									"value": "{{areaid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "update area with lon < -180",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"    let area\r",
									"    try {\r",
									"        area = await api.addArea(rnd.getArea());\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"    pm.collectionVariables.set(\"areaid\", Number(area.id))\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            lon : -181\r",
									"    }),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.have.status(400);\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/areas/:areaId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"areas",
								":areaId"
							],
							"variable": [
								{
									"key": "areaId",
									"value": "{{areaid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "update area with radius <= 0 Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"    let area\r",
									"    try {\r",
									"        area = await api.addArea(rnd.getArea());\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"    pm.collectionVariables.set(\"areaid\", Number(area.id))\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            radius : 0\r",
									"    }),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.have.status(400);\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/areas/:areaId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"areas",
								":areaId"
							],
							"variable": [
								{
									"key": "areaId",
									"value": "{{areaid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "update area with radius > 0  < 20041",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"    let area\r",
									"    try {\r",
									"        area = await api.addArea(rnd.getArea());\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"    pm.collectionVariables.set(\"areaid\", Number(area.id))\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            radius : 1\r",
									"    }),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.have.status(200);\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/areas/:areaId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"areas",
								":areaId"
							],
							"variable": [
								{
									"key": "areaId",
									"value": "{{areaid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "update area with radius > 20040",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"    let area\r",
									"    try {\r",
									"        area = await api.addArea(rnd.getArea());\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"    pm.collectionVariables.set(\"areaid\", Number(area.id))\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            radius : 20041\r",
									"    }),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.have.status(400);\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/areas/:areaId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"areas",
								":areaId"
							],
							"variable": [
								{
									"key": "areaId",
									"value": "{{areaid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "update area with radius > 20041",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"    let area\r",
									"    try {\r",
									"        area = await api.addArea(rnd.getArea());\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"    pm.collectionVariables.set(\"areaid\", Number(area.id))\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            radius : 20040\r",
									"    }),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.have.status(200);\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/areas/:areaId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"areas",
								":areaId"
							],
							"variable": [
								{
									"key": "areaId",
									"value": "{{areaid}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "delete area",
			"item": [
				{
					"name": "delete area",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const area = await api.addArea(rnd.getArea());\r",
									"        const findedArea = await api.findArea(area.id);\r",
									"        pm.collectionVariables.set(\"areaid\", area.id)\r",
									"        pm.collectionVariables.set(\"response\", findedArea)\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/areas/:areaId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"areas",
								":areaId"
							],
							"variable": [
								{
									"key": "areaId",
									"value": "{{areaid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "delete area with that doesn't exist",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const area = await api.addArea(rnd.getArea());\r",
									"        pm.collectionVariables.set(\"areaid\", area.id + 1)\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/areas/:areaId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"areas",
								":areaId"
							],
							"variable": [
								{
									"key": "areaId",
									"value": "{{areaid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "delete area with broken id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const area = await api.addArea(rnd.getArea());\r",
									"        pm.collectionVariables.set(\"areaid\", area.id + 1)\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/areas/:areaId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"areas",
								":areaId"
							],
							"variable": [
								{
									"key": "areaId",
									"value": "\"ereg\""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "get area",
			"item": [
				{
					"name": "get area by id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const area = await api.addArea(rnd.getArea());\r",
									"        pm.collectionVariables.set(\"areaid\", area.id)\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/areas/:areaId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"areas",
								":areaId"
							],
							"variable": [
								{
									"key": "areaId",
									"value": "{{areaid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get area by id area doesn't exist",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const area = await api.addArea(rnd.getArea());\r",
									"        pm.collectionVariables.set(\"areaid\", area.id + 1)\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/areas/:areaId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"areas",
								":areaId"
							],
							"variable": [
								{
									"key": "areaId",
									"value": "{{areaid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get area by broken id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const area = await api.addArea(rnd.getArea());\r",
									"        pm.collectionVariables.set(\"areaid\", area.id + 1)\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/areas/:areaId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"areas",
								":areaId"
							],
							"variable": [
								{
									"key": "areaId",
									"value": "fhf"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "get areas",
			"item": [
				{
					"name": "get areas with no params",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        await api.addArea(rnd.getArea());\r",
									"        await api.addArea(rnd.getArea());\r",
									"        await api.addArea(rnd.getArea());\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/areas",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"areas"
							]
						}
					},
					"response": []
				},
				{
					"name": "get areas with all params",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        await api.addArea(rnd.getArea());\r",
									"        await api.addArea(rnd.getArea());\r",
									"        await api.addArea(rnd.getArea());\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/areas?from=0&size=1000&sortArea=SPACE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"areas"
							],
							"query": [
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "1000"
								},
								{
									"key": "sortArea",
									"value": "SPACE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get areas with broken params",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        await api.addArea(rnd.getArea());\r",
									"        await api.addArea(rnd.getArea());\r",
									"        await api.addArea(rnd.getArea());\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/areas?from=0sdf&size=1000sf&sortArea=SPACEX",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"areas"
							],
							"query": [
								{
									"key": "from",
									"value": "0sdf"
								},
								{
									"key": "size",
									"value": "1000sf"
								},
								{
									"key": "sortArea",
									"value": "SPACEX"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "get events by areas",
			"item": [
				{
					"name": "get event from area without params",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const area = await api.addArea(rnd.getAreaWithBigRadius());\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event1 = await api.addEvent(user.id, rnd.getEventForArea(category.id, area.lat + 0.0001, area.lon + 0.0001, 0));\r",
									"        event1 = await api.publishEvent(event1.id);\r",
									"        \r",
									"        let event2 = await api.addEvent(user.id, rnd.getEventForArea(category.id, area.lat + 0.0002, area.lon + 0.0002, 3));\r",
									"        event2 = await api.publishEvent(event2.id);\r",
									"\r",
									"        let event3 = await api.addEvent(user.id, rnd.getEventForArea(category.id, area.lat + 0.0003, area.lon + 0.0003, 1));\r",
									"        event3 = await api.publishEvent(event3.id);\r",
									"\r",
									"        const user1 = await api.addUser(rnd.getUser());\r",
									"        const user2 = await api.addUser(rnd.getUser());\r",
									"        const user3 = await api.addUser(rnd.getUser());\r",
									"        await api.publishParticipationRequest(event1.id, user1.id)\r",
									"        await api.publishParticipationRequest(event1.id, user2.id)\r",
									"        await api.publishParticipationRequest(event1.id, user3.id)\r",
									"\r",
									"        await api.publishParticipationRequest(event2.id, user1.id)\r",
									"        await api.publishParticipationRequest(event2.id, user2.id)\r",
									"\r",
									"        await api.publishParticipationRequest(event3.id, user1.id)\r",
									"\r",
									"        pm.collectionVariables.set(\"areaid\", Number(area.id));\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/areas/:areaId/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"areas",
								":areaId",
								"events"
							],
							"variable": [
								{
									"key": "areaId",
									"value": "{{areaid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get event from area with params sort PUBLICATION_DATE",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const area = await api.addArea(rnd.getAreaWithBigRadius());\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event1 = await api.addEvent(user.id, rnd.getEventForArea(category.id, area.lat + 0.0001, area.lon + 0.0001, 0));\r",
									"        event1 = await api.publishEvent(event1.id);\r",
									"        \r",
									"        let event2 = await api.addEvent(user.id, rnd.getEventForArea(category.id, area.lat + 0.0002, area.lon + 0.0002, 3));\r",
									"        event2 = await api.publishEvent(event2.id);\r",
									"\r",
									"        let event3 = await api.addEvent(user.id, rnd.getEventForArea(category.id, area.lat + 0.0003, area.lon + 0.0003, 1));\r",
									"        event3 = await api.publishEvent(event3.id);\r",
									"\r",
									"        const user1 = await api.addUser(rnd.getUser());\r",
									"        const user2 = await api.addUser(rnd.getUser());\r",
									"        const user3 = await api.addUser(rnd.getUser());\r",
									"        await api.publishParticipationRequest(event1.id, user1.id)\r",
									"        await api.publishParticipationRequest(event1.id, user2.id)\r",
									"        await api.publishParticipationRequest(event1.id, user3.id)\r",
									"\r",
									"        await api.publishParticipationRequest(event2.id, user1.id)\r",
									"        await api.publishParticipationRequest(event2.id, user2.id)\r",
									"\r",
									"        await api.publishParticipationRequest(event3.id, user1.id)\r",
									"\r",
									"        pm.collectionVariables.set(\"areaid\", Number(area.id));\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/areas/:areaId/events?from=0&size=1000&sort=PUBLICATION_DATE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"areas",
								":areaId",
								"events"
							],
							"query": [
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "1000"
								},
								{
									"key": "sort",
									"value": "PUBLICATION_DATE"
								}
							],
							"variable": [
								{
									"key": "areaId",
									"value": "{{areaid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get event from area with params sort DISTANCE",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const area = await api.addArea(rnd.getAreaWithBigRadius());\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event1 = await api.addEvent(user.id, rnd.getEventForArea(category.id, area.lat + 0.0001, area.lon + 0.0001, 0));\r",
									"        event1 = await api.publishEvent(event1.id);\r",
									"        \r",
									"        let event2 = await api.addEvent(user.id, rnd.getEventForArea(category.id, area.lat + 0.0002, area.lon + 0.0002, 3));\r",
									"        event2 = await api.publishEvent(event2.id);\r",
									"\r",
									"        let event3 = await api.addEvent(user.id, rnd.getEventForArea(category.id, area.lat + 0.0003, area.lon + 0.0003, 1));\r",
									"        event3 = await api.publishEvent(event3.id);\r",
									"\r",
									"        const user1 = await api.addUser(rnd.getUser());\r",
									"        const user2 = await api.addUser(rnd.getUser());\r",
									"        const user3 = await api.addUser(rnd.getUser());\r",
									"        await api.publishParticipationRequest(event1.id, user1.id)\r",
									"        await api.publishParticipationRequest(event1.id, user2.id)\r",
									"        await api.publishParticipationRequest(event1.id, user3.id)\r",
									"\r",
									"        await api.publishParticipationRequest(event2.id, user1.id)\r",
									"        await api.publishParticipationRequest(event2.id, user2.id)\r",
									"\r",
									"        await api.publishParticipationRequest(event3.id, user1.id)\r",
									"\r",
									"        pm.collectionVariables.set(\"areaid\", Number(area.id));\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/areas/:areaId/events?from=0&size=1000&sort=DISTANCE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"areas",
								":areaId",
								"events"
							],
							"query": [
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "1000"
								},
								{
									"key": "sort",
									"value": "DISTANCE"
								}
							],
							"variable": [
								{
									"key": "areaId",
									"value": "{{areaid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get event from area with params sort POPULARITY",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const area = await api.addArea(rnd.getAreaWithBigRadius());\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event1 = await api.addEvent(user.id, rnd.getEventForArea(category.id, area.lat + 0.0001, area.lon + 0.0001, 0));\r",
									"        event1 = await api.publishEvent(event1.id);\r",
									"        \r",
									"        let event2 = await api.addEvent(user.id, rnd.getEventForArea(category.id, area.lat + 0.0002, area.lon + 0.0002, 3));\r",
									"        event2 = await api.publishEvent(event2.id);\r",
									"\r",
									"        let event3 = await api.addEvent(user.id, rnd.getEventForArea(category.id, area.lat + 0.0003, area.lon + 0.0003, 1));\r",
									"        event3 = await api.publishEvent(event3.id);\r",
									"\r",
									"        const user1 = await api.addUser(rnd.getUser());\r",
									"        const user2 = await api.addUser(rnd.getUser());\r",
									"        const user3 = await api.addUser(rnd.getUser());\r",
									"        await api.publishParticipationRequest(event1.id, user1.id)\r",
									"        await api.publishParticipationRequest(event1.id, user2.id)\r",
									"        await api.publishParticipationRequest(event1.id, user3.id)\r",
									"\r",
									"        await api.publishParticipationRequest(event2.id, user1.id)\r",
									"        await api.publishParticipationRequest(event2.id, user2.id)\r",
									"\r",
									"        await api.publishParticipationRequest(event3.id, user1.id)\r",
									"\r",
									"        pm.collectionVariables.set(\"areaid\", Number(area.id));\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/areas/:areaId/events?from=0&size=1000&sort=POPULARITY",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"areas",
								":areaId",
								"events"
							],
							"query": [
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "1000"
								},
								{
									"key": "sort",
									"value": "POPULARITY"
								}
							],
							"variable": [
								{
									"key": "areaId",
									"value": "{{areaid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get event from area with params Available",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const area = await api.addArea(rnd.getAreaWithBigRadius());\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event1 = await api.addEvent(user.id, rnd.getEventForArea(category.id, area.lat + 0.0001, area.lon + 0.0001, 0));\r",
									"        event1 = await api.publishEvent(event1.id);\r",
									"        \r",
									"        let event2 = await api.addEvent(user.id, rnd.getEventForArea(category.id, area.lat + 0.0002, area.lon + 0.0002, 3));\r",
									"        event2 = await api.publishEvent(event2.id);\r",
									"\r",
									"        let event3 = await api.addEvent(user.id, rnd.getEventForArea(category.id, area.lat + 0.0003, area.lon + 0.0003, 1));\r",
									"        event3 = await api.publishEvent(event3.id);\r",
									"\r",
									"        const user1 = await api.addUser(rnd.getUser());\r",
									"        const user2 = await api.addUser(rnd.getUser());\r",
									"        const user3 = await api.addUser(rnd.getUser());\r",
									"        await api.publishParticipationRequest(event1.id, user1.id)\r",
									"        await api.publishParticipationRequest(event1.id, user2.id)\r",
									"        await api.publishParticipationRequest(event1.id, user3.id)\r",
									"\r",
									"        await api.publishParticipationRequest(event2.id, user1.id)\r",
									"        await api.publishParticipationRequest(event2.id, user2.id)\r",
									"\r",
									"        await api.publishParticipationRequest(event3.id, user1.id)\r",
									"\r",
									"        pm.collectionVariables.set(\"areaid\", Number(area.id));\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/areas/:areaId/events?available=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"areas",
								":areaId",
								"events"
							],
							"query": [
								{
									"key": "available",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "areaId",
									"value": "{{areaid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get event from area with params Available sort PUBLICATION_DATE",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const area = await api.addArea(rnd.getAreaWithBigRadius());\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event1 = await api.addEvent(user.id, rnd.getEventForArea(category.id, area.lat + 0.0001, area.lon + 0.0001, 0));\r",
									"        event1 = await api.publishEvent(event1.id);\r",
									"        \r",
									"        let event2 = await api.addEvent(user.id, rnd.getEventForArea(category.id, area.lat + 0.0002, area.lon + 0.0002, 3));\r",
									"        event2 = await api.publishEvent(event2.id);\r",
									"\r",
									"        let event3 = await api.addEvent(user.id, rnd.getEventForArea(category.id, area.lat + 0.0003, area.lon + 0.0003, 1));\r",
									"        event3 = await api.publishEvent(event3.id);\r",
									"\r",
									"        const user1 = await api.addUser(rnd.getUser());\r",
									"        const user2 = await api.addUser(rnd.getUser());\r",
									"        const user3 = await api.addUser(rnd.getUser());\r",
									"        await api.publishParticipationRequest(event1.id, user1.id)\r",
									"        await api.publishParticipationRequest(event1.id, user2.id)\r",
									"        await api.publishParticipationRequest(event1.id, user3.id)\r",
									"\r",
									"        await api.publishParticipationRequest(event2.id, user1.id)\r",
									"        await api.publishParticipationRequest(event2.id, user2.id)\r",
									"\r",
									"        await api.publishParticipationRequest(event3.id, user1.id)\r",
									"\r",
									"        pm.collectionVariables.set(\"areaid\", Number(area.id));\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/areas/:areaId/events?available=true&sort=PUBLICATION_DATE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"areas",
								":areaId",
								"events"
							],
							"query": [
								{
									"key": "available",
									"value": "true"
								},
								{
									"key": "sort",
									"value": "PUBLICATION_DATE"
								}
							],
							"variable": [
								{
									"key": "areaId",
									"value": "{{areaid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get event from area with params Available sort DISTANCE",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const area = await api.addArea(rnd.getAreaWithBigRadius());\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event1 = await api.addEvent(user.id, rnd.getEventForArea(category.id, area.lat + 0.0001, area.lon + 0.0001, 0));\r",
									"        event1 = await api.publishEvent(event1.id);\r",
									"        \r",
									"        let event2 = await api.addEvent(user.id, rnd.getEventForArea(category.id, area.lat + 0.0002, area.lon + 0.0002, 3));\r",
									"        event2 = await api.publishEvent(event2.id);\r",
									"\r",
									"        let event3 = await api.addEvent(user.id, rnd.getEventForArea(category.id, area.lat + 0.0003, area.lon + 0.0003, 1));\r",
									"        event3 = await api.publishEvent(event3.id);\r",
									"\r",
									"        const user1 = await api.addUser(rnd.getUser());\r",
									"        const user2 = await api.addUser(rnd.getUser());\r",
									"        const user3 = await api.addUser(rnd.getUser());\r",
									"        await api.publishParticipationRequest(event1.id, user1.id)\r",
									"        await api.publishParticipationRequest(event1.id, user2.id)\r",
									"        await api.publishParticipationRequest(event1.id, user3.id)\r",
									"\r",
									"        await api.publishParticipationRequest(event2.id, user1.id)\r",
									"        await api.publishParticipationRequest(event2.id, user2.id)\r",
									"\r",
									"        await api.publishParticipationRequest(event3.id, user1.id)\r",
									"\r",
									"        pm.collectionVariables.set(\"areaid\", Number(area.id));\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/areas/:areaId/events?available=true&sort=DISTANCE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"areas",
								":areaId",
								"events"
							],
							"query": [
								{
									"key": "available",
									"value": "true"
								},
								{
									"key": "sort",
									"value": "DISTANCE"
								}
							],
							"variable": [
								{
									"key": "areaId",
									"value": "{{areaid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get event from area with params Available sort POPULARITY",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const area = await api.addArea(rnd.getAreaWithBigRadius());\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event1 = await api.addEvent(user.id, rnd.getEventForArea(category.id, area.lat + 0.0001, area.lon + 0.0001, 0));\r",
									"        event1 = await api.publishEvent(event1.id);\r",
									"        \r",
									"        let event2 = await api.addEvent(user.id, rnd.getEventForArea(category.id, area.lat + 0.0002, area.lon + 0.0002, 3));\r",
									"        event2 = await api.publishEvent(event2.id);\r",
									"\r",
									"        let event3 = await api.addEvent(user.id, rnd.getEventForArea(category.id, area.lat + 0.0003, area.lon + 0.0003, 1));\r",
									"        event3 = await api.publishEvent(event3.id);\r",
									"\r",
									"        const user1 = await api.addUser(rnd.getUser());\r",
									"        const user2 = await api.addUser(rnd.getUser());\r",
									"        const user3 = await api.addUser(rnd.getUser());\r",
									"        await api.publishParticipationRequest(event1.id, user1.id)\r",
									"        await api.publishParticipationRequest(event1.id, user2.id)\r",
									"        await api.publishParticipationRequest(event1.id, user3.id)\r",
									"\r",
									"        await api.publishParticipationRequest(event2.id, user1.id)\r",
									"        await api.publishParticipationRequest(event2.id, user2.id)\r",
									"\r",
									"        await api.publishParticipationRequest(event3.id, user1.id)\r",
									"\r",
									"        pm.collectionVariables.set(\"areaid\", Number(area.id));\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/areas/:areaId/events?available=true&sort=POPULARITY",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"areas",
								":areaId",
								"events"
							],
							"query": [
								{
									"key": "available",
									"value": "true"
								},
								{
									"key": "sort",
									"value": "POPULARITY"
								}
							],
							"variable": [
								{
									"key": "areaId",
									"value": "{{areaid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get event from area with params NotAvailable",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const area = await api.addArea(rnd.getAreaWithBigRadius());\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event1 = await api.addEvent(user.id, rnd.getEventForArea(category.id, area.lat + 0.0001, area.lon + 0.0001, 0));\r",
									"        event1 = await api.publishEvent(event1.id);\r",
									"        \r",
									"        let event2 = await api.addEvent(user.id, rnd.getEventForArea(category.id, area.lat + 0.0002, area.lon + 0.0002, 3));\r",
									"        event2 = await api.publishEvent(event2.id);\r",
									"\r",
									"        let event3 = await api.addEvent(user.id, rnd.getEventForArea(category.id, area.lat + 0.0003, area.lon + 0.0003, 1));\r",
									"        event3 = await api.publishEvent(event3.id);\r",
									"\r",
									"        const user1 = await api.addUser(rnd.getUser());\r",
									"        const user2 = await api.addUser(rnd.getUser());\r",
									"        const user3 = await api.addUser(rnd.getUser());\r",
									"        await api.publishParticipationRequest(event1.id, user1.id)\r",
									"        await api.publishParticipationRequest(event1.id, user2.id)\r",
									"        await api.publishParticipationRequest(event1.id, user3.id)\r",
									"\r",
									"        await api.publishParticipationRequest(event2.id, user1.id)\r",
									"        await api.publishParticipationRequest(event2.id, user2.id)\r",
									"\r",
									"        await api.publishParticipationRequest(event3.id, user1.id)\r",
									"\r",
									"        pm.collectionVariables.set(\"areaid\", Number(area.id));\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/areas/:areaId/events?available=false",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"areas",
								":areaId",
								"events"
							],
							"query": [
								{
									"key": "available",
									"value": "false"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "areaId",
									"value": "{{areaid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get event from area with params NotAvailable sort PUBLICATION_DATE",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const area = await api.addArea(rnd.getAreaWithBigRadius());\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event1 = await api.addEvent(user.id, rnd.getEventForArea(category.id, area.lat + 0.0001, area.lon + 0.0001, 0));\r",
									"        event1 = await api.publishEvent(event1.id);\r",
									"        \r",
									"        let event2 = await api.addEvent(user.id, rnd.getEventForArea(category.id, area.lat + 0.0002, area.lon + 0.0002, 3));\r",
									"        event2 = await api.publishEvent(event2.id);\r",
									"\r",
									"        let event3 = await api.addEvent(user.id, rnd.getEventForArea(category.id, area.lat + 0.0003, area.lon + 0.0003, 1));\r",
									"        event3 = await api.publishEvent(event3.id);\r",
									"\r",
									"        const user1 = await api.addUser(rnd.getUser());\r",
									"        const user2 = await api.addUser(rnd.getUser());\r",
									"        const user3 = await api.addUser(rnd.getUser());\r",
									"        await api.publishParticipationRequest(event1.id, user1.id)\r",
									"        await api.publishParticipationRequest(event1.id, user2.id)\r",
									"        await api.publishParticipationRequest(event1.id, user3.id)\r",
									"\r",
									"        await api.publishParticipationRequest(event2.id, user1.id)\r",
									"        await api.publishParticipationRequest(event2.id, user2.id)\r",
									"\r",
									"        await api.publishParticipationRequest(event3.id, user1.id)\r",
									"\r",
									"        pm.collectionVariables.set(\"areaid\", Number(area.id));\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/areas/:areaId/events?available=false&sort=PUBLICATION_DATE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"areas",
								":areaId",
								"events"
							],
							"query": [
								{
									"key": "available",
									"value": "false"
								},
								{
									"key": "sort",
									"value": "PUBLICATION_DATE"
								}
							],
							"variable": [
								{
									"key": "areaId",
									"value": "{{areaid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get event from area with params NotAvailable sort DISTANCE",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const area = await api.addArea(rnd.getAreaWithBigRadius());\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event1 = await api.addEvent(user.id, rnd.getEventForArea(category.id, area.lat + 0.0001, area.lon + 0.0001, 0));\r",
									"        event1 = await api.publishEvent(event1.id);\r",
									"        \r",
									"        let event2 = await api.addEvent(user.id, rnd.getEventForArea(category.id, area.lat + 0.0002, area.lon + 0.0002, 3));\r",
									"        event2 = await api.publishEvent(event2.id);\r",
									"\r",
									"        let event3 = await api.addEvent(user.id, rnd.getEventForArea(category.id, area.lat + 0.0003, area.lon + 0.0003, 1));\r",
									"        event3 = await api.publishEvent(event3.id);\r",
									"\r",
									"        const user1 = await api.addUser(rnd.getUser());\r",
									"        const user2 = await api.addUser(rnd.getUser());\r",
									"        const user3 = await api.addUser(rnd.getUser());\r",
									"        await api.publishParticipationRequest(event1.id, user1.id)\r",
									"        await api.publishParticipationRequest(event1.id, user2.id)\r",
									"        await api.publishParticipationRequest(event1.id, user3.id)\r",
									"\r",
									"        await api.publishParticipationRequest(event2.id, user1.id)\r",
									"        await api.publishParticipationRequest(event2.id, user2.id)\r",
									"\r",
									"        await api.publishParticipationRequest(event3.id, user1.id)\r",
									"\r",
									"        pm.collectionVariables.set(\"areaid\", Number(area.id));\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/areas/:areaId/events?available=false&sort=DISTANCE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"areas",
								":areaId",
								"events"
							],
							"query": [
								{
									"key": "available",
									"value": "false"
								},
								{
									"key": "sort",
									"value": "DISTANCE"
								}
							],
							"variable": [
								{
									"key": "areaId",
									"value": "{{areaid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get event from area with params NotAvailable sort POPULARITY",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const area = await api.addArea(rnd.getAreaWithBigRadius());\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event1 = await api.addEvent(user.id, rnd.getEventForArea(category.id, area.lat + 0.0001, area.lon + 0.0001, 0));\r",
									"        event1 = await api.publishEvent(event1.id);\r",
									"        \r",
									"        let event2 = await api.addEvent(user.id, rnd.getEventForArea(category.id, area.lat + 0.0002, area.lon + 0.0002, 3));\r",
									"        event2 = await api.publishEvent(event2.id);\r",
									"\r",
									"        let event3 = await api.addEvent(user.id, rnd.getEventForArea(category.id, area.lat + 0.0003, area.lon + 0.0003, 1));\r",
									"        event3 = await api.publishEvent(event3.id);\r",
									"\r",
									"        const user1 = await api.addUser(rnd.getUser());\r",
									"        const user2 = await api.addUser(rnd.getUser());\r",
									"        const user3 = await api.addUser(rnd.getUser());\r",
									"        await api.publishParticipationRequest(event1.id, user1.id)\r",
									"        await api.publishParticipationRequest(event1.id, user2.id)\r",
									"        await api.publishParticipationRequest(event1.id, user3.id)\r",
									"\r",
									"        await api.publishParticipationRequest(event2.id, user1.id)\r",
									"        await api.publishParticipationRequest(event2.id, user2.id)\r",
									"\r",
									"        await api.publishParticipationRequest(event3.id, user1.id)\r",
									"\r",
									"        pm.collectionVariables.set(\"areaid\", Number(area.id));\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/areas/:areaId/events?available=false&sort=POPULARITY",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"areas",
								":areaId",
								"events"
							],
							"query": [
								{
									"key": "available",
									"value": "false"
								},
								{
									"key": "sort",
									"value": "POPULARITY"
								}
							],
							"variable": [
								{
									"key": "areaId",
									"value": "{{areaid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get event from area with broken params",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const area = await api.addArea(rnd.getAreaWithBigRadius());\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event1 = await api.addEvent(user.id, rnd.getEventForArea(category.id, area.lat + 0.0001, area.lon + 0.0001, 0));\r",
									"        event1 = await api.publishEvent(event1.id);\r",
									"        \r",
									"        let event2 = await api.addEvent(user.id, rnd.getEventForArea(category.id, area.lat + 0.0002, area.lon + 0.0002, 3));\r",
									"        event2 = await api.publishEvent(event2.id);\r",
									"\r",
									"        let event3 = await api.addEvent(user.id, rnd.getEventForArea(category.id, area.lat + 0.0003, area.lon + 0.0003, 1));\r",
									"        event3 = await api.publishEvent(event3.id);\r",
									"\r",
									"        const user1 = await api.addUser(rnd.getUser());\r",
									"        const user2 = await api.addUser(rnd.getUser());\r",
									"        const user3 = await api.addUser(rnd.getUser());\r",
									"        await api.publishParticipationRequest(event1.id, user1.id)\r",
									"        await api.publishParticipationRequest(event1.id, user2.id)\r",
									"        await api.publishParticipationRequest(event1.id, user3.id)\r",
									"\r",
									"        await api.publishParticipationRequest(event2.id, user1.id)\r",
									"        await api.publishParticipationRequest(event2.id, user2.id)\r",
									"\r",
									"        await api.publishParticipationRequest(event3.id, user1.id)\r",
									"\r",
									"        pm.collectionVariables.set(\"areaid\", Number(area.id));\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/areas/:areaId/events?available=falsesfd&sort=POPULARITYwefe",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"areas",
								":areaId",
								"events"
							],
							"query": [
								{
									"key": "available",
									"value": "falsesfd"
								},
								{
									"key": "sort",
									"value": "POPULARITYwefe"
								}
							],
							"variable": [
								{
									"key": "areaId",
									"value": "{{areaid}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async addCompilation(compilation, verbose=null) {",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
					"    }",
					"",
					"    async addArea(area, verbose=null) {",
					"        return this.post(\"/admin/areas\", area, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
					"    }",
					"    ",
					"    async rejectEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
					"    }",
					"",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests/', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
					"    }",
					"",
					"    async findCategory(catId, verbose=null) {",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
					"    }",
					"",
					"    async findArea(areaId, verbose=null) {",
					"        return this.get('/areas/' + areaId, null, \"Ошибка при поиске области по id\", verbose);",
					"    }",
					"",
					"    async findCompilation(compId, verbose=null) {",
					"        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
					"    }",
					"",
					"    async findEvent(eventId, verbose=null) {",
					"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
					"    }",
					"",
					"    async findUser(userId, verbose=null) {",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"                    if (response.stream.length === 0){",
					"                        reject(new Error('Отправлено пустое тело ответа'))",
					"                    }else{",
					"                        resolve(response.json());",
					"                    }",
					"                });",
					"                ",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getEventForArea(categoryId, lat, lon, partlimit) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTimeRandomHours(),",
					"            location: {",
					"                lat: lat,",
					"                lon: lon,",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: partlimit,",
					"            requestModeration: false,",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getAreaWithBigRadius() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"            lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            radius: parseFloat((Math.random() * (100) + 30).toFixed(4))",
					"        }",
					"    }",
					"",
					"    getCompilation(...eventIds) {",
					"        return {",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            events: eventIds",
					"        };",
					"    }",
					"",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"",
					"    getFutureDateTimeRandomHours(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift + Math.floor(Math.random() * 100), 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"",
					"    getWord(length = 1) {",
					"        let result = '';",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"        const charactersLength = characters.length;",
					"        let counter = 0;",
					"        while (counter < length) {",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
					"            counter += 1;",
					"        }",
					"        return result;",
					"    }",
					"",
					"    getArea() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"            lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            radius: parseFloat((Math.random() * (100) + 0.0000001).toFixed(4))",
					"        }",
					"    }",
					"",
					"    ",
					"",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "name",
			"value": "",
			"type": "string"
		},
		{
			"key": "usersCount",
			"value": "1",
			"type": "string"
		},
		{
			"key": "catid",
			"value": "1",
			"type": "string"
		},
		{
			"key": "request_body",
			"value": "",
			"type": "string"
		},
		{
			"key": "mail",
			"value": "",
			"type": "string"
		},
		{
			"key": "response",
			"value": "",
			"type": "string"
		},
		{
			"key": "uid",
			"value": "1",
			"type": "string"
		},
		{
			"key": "catname",
			"value": "",
			"type": "string"
		},
		{
			"key": "eid",
			"value": "1",
			"type": "string"
		},
		{
			"key": "compid",
			"value": "1",
			"type": "string"
		},
		{
			"key": "toCheck",
			"value": "",
			"type": "string"
		},
		{
			"key": "newDataToSet",
			"value": "",
			"type": "string"
		},
		{
			"key": "uid1",
			"value": "",
			"type": "string"
		},
		{
			"key": "reqid",
			"value": "1",
			"type": "string"
		},
		{
			"key": "catId",
			"value": "",
			"type": "string"
		},
		{
			"key": "confirmedRequests",
			"value": "",
			"type": "string"
		},
		{
			"key": "responseArr",
			"value": "",
			"type": "string"
		},
		{
			"key": "source1",
			"value": "",
			"type": "string"
		},
		{
			"key": "source2",
			"value": "",
			"type": "string"
		},
		{
			"key": "fromId",
			"value": "0",
			"type": "string"
		},
		{
			"key": "source",
			"value": "",
			"type": "string"
		},
		{
			"key": "areaid",
			"value": "1",
			"type": "string"
		}
	]
}